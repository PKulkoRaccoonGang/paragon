{"version":3,"file":"component---src-pages-insights-jsx-293595182b79ba4c6a6b.js","mappings":"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","sources":["webpack://paragon-pattern-library-documentation/./src/components/insights/SummaryUsageExamples.jsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ProjectUsageExamples.jsx","webpack://paragon-pattern-library-documentation/./src/components/insights/ComponentUsageExamples.jsx","webpack://paragon-pattern-library-documentation/./src/utils/getGithubProjectUrl.js","webpack://paragon-pattern-library-documentation/./src/pages/insights.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\nconst SummaryUsageExamples = ({ row }) => {\n  const componentUsages = row.original.usages;\n  return componentUsages.map(({\n    name: projectName,\n    usages: projectUsages,\n    repositoryUrl,\n  }) => (\n    <div className=\"pgn-doc__summary-usages__project mb-4\" key={projectName}>\n      <h5 className=\"font-weight-bold\">{projectName}</h5>\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }) => (\n          <li key={`${filePath}L#${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ));\n};\n\nSummaryUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SummaryUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\nconst ProjectUsageExamples = ({ row }) => {\n  const componentUsages = row.original.usages;\n  const repositoryUrl = row.original.repositoryUrl;\n  return (\n    <>\n      {Object.keys(componentUsages).length === 0 && (\n        <p>This project does not import any Paragon components, but may still use its SCSS styles.</p>\n      )}\n      {Object.entries(componentUsages).map(([componentName, componentUsages]) => (\n        <div className=\"pgn-doc__usages-modal mb-4\" key={componentName}>\n          <h5 className=\"font-weight-bold\">{componentName}</h5>\n          <ul className=\"list-unstyled\">\n            {componentUsages.map(({\n              filePath,\n              line,\n            }) => (\n              <li key={`${filePath}L#${line}`}>\n                {repositoryUrl ? (\n                  <>\n                    <Hyperlink\n                      destination={`${repositoryUrl}/${filePath}#L${line}`}\n                      target=\"_blank\"\n                    >\n                      {filePath}\n                    </Hyperlink>\n                    {' '}(line {line})\n                  </>\n                ) : (\n                  <>{filePath} (line {line})</>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </>\n  );\n};\n\nProjectUsageExamples.propTypes = {\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ProjectUsageExamples;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '~paragon-react';\n\nconst ComponentUsageExamples = ({ row }) => {\n  const repositoryUrl = row.original.repositoryUrl;\n  const projectUsages = row.original.usages;\n  return (\n  <div className=\"pgn-doc__component-usage__project\">\n      <ul className=\"list-unstyled\">\n        {projectUsages.map(({\n          filePath,\n          line,\n        }) => (\n          <li key={`${filePath}#L${line}`}>\n            {repositoryUrl ? (\n              <>\n                <Hyperlink\n                  destination={`${repositoryUrl}/${filePath}#L${line}`}\n                  target=\"_blank\"\n                >\n                  {filePath}\n                </Hyperlink>\n                {' '}(line {line})\n              </>\n            ) : (\n              <>{filePath} (line {line})</>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nComponentUsageExamples.propTypes = {\n  componentName: PropTypes.string.isRequired,\n  row: PropTypes.shape({\n    original: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      repositoryUrl: PropTypes.string,\n      usages: PropTypes.arrayOf(PropTypes.shape({\n        filePath: PropTypes.string.isRequired,\n        line: PropTypes.number.isRequired,\n      })).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default ComponentUsageExamples;\n","const getGithubProjectUrl = (repository) => {\n  let repositoryUrl;\n  if (repository === Object(repository) && repository.url) {\n    repositoryUrl = repository.url;\n  } else if (typeof repository === 'string') {\n    repositoryUrl = repository;\n  } else {\n    // unsupported repository field\n    return;\n  }\n  const parts = repositoryUrl.split('/');\n  const githubDomainIndex = parts.findIndex(part => part === 'github.com');\n  parts.splice(0, githubDomainIndex);\n  const parsedRepositoryUrl = parts.join('/').replace('.git', '');\n  return `https://${parsedRepositoryUrl}/blob/master`;\n};\n\nexport default getGithubProjectUrl;\n","import React from 'react';\nimport { navigate } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport {\n  DataTable,\n  Tabs,\n  Tab,\n  Container,\n} from '~paragon-react'; // eslint-disable-line\nimport SEO from '../components/SEO';\nimport Layout from '../components/PageLayout';\nimport SummaryUsageExamples from '../components/insights/SummaryUsageExamples';\nimport ProjectUsageExamples from '../components/insights/ProjectUsageExamples';\nimport ComponentUsageExamples from '../components/insights/ComponentUsageExamples';\nimport getGithubProjectUrl from '../utils/getGithubProjectUrl';\nimport dependentProjectsAnalysis from '../../../dependent-usage.json';\nimport { INSIGHTS_TABS, INSIGHTS_PAGES } from '../config';\n\nconst {\n  lastModified: analysisLastUpdated,\n  projectUsages: dependentProjectsUsages,\n} = dependentProjectsAnalysis;\n\nconst dependentProjects = dependentProjectsUsages.map(dependentUsage => ({\n  ...dependentUsage,\n  repositoryUrl: getGithubProjectUrl(dependentUsage.repository),\n  count: Object.values(dependentUsage.usages).reduce((accumulator, usage) => accumulator += usage.length, 0),\n}));\n\nconst componentsUsage = dependentProjectsUsages.reduce((accumulator, project) => {\n  Object.keys(project.usages).forEach(componentName => {\n    if (!accumulator[componentName]) {\n      accumulator[componentName] = [];\n    }\n    accumulator[componentName] = accumulator[componentName].concat({\n      name: project.name,\n      folderName: project.folderName,\n      version: project.version,\n      repositoryUrl: getGithubProjectUrl(project.repository),\n      componentUsageCount: project.usages[componentName].length,\n      usages: project.usages[componentName],\n    });\n  });\n  return accumulator;\n}, {});\n\nconst summaryComponentsUsage = Object.entries(componentsUsage).map(([componentName, usages]) => {\n  const componentUsageCounts = usages.reduce((accumulator, project) => accumulator += project.componentUsageCount, 0);\n  return {\n    name: componentName,\n    count: componentUsageCounts,\n    usages: componentsUsage[componentName],\n  };\n});\n\nconst SummaryUsage = () => {\n  const summaryTableData = summaryComponentsUsage.sort((a, b) => {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n    return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n  });\n  const round = (n) => Math.round(n * 10) / 10;\n  const averageComponentsUsedPerProject = dependentProjects.reduce((accumulator, project) => accumulator += project.count, 0) / dependentProjects.length;\n  return (\n    <div className=\"pt-5 mb-5\">\n      <div className=\"mb-5\">\n        <h2>Overview</h2>\n        <p>\n          Paragon is used by at least <strong>{dependentProjects.length} projects</strong>, with an average\n          of <strong>{round(averageComponentsUsedPerProject)} component instances</strong> per project.\n        </p>\n      </div>\n      <h3>Overall component usage</h3>\n      <DataTable\n        isExpandable\n        isSortable\n        itemCount={summaryTableData.length}\n        data={summaryTableData}\n        renderRowSubComponent={({ row }) => <SummaryUsageExamples row={row} />}\n        columns={[\n          {\n            id: 'expander',\n            Header: DataTable.ExpandAll,\n            Cell: DataTable.ExpandRow,\n          },\n          {\n            Header: 'Component Name',\n            accessor: 'name',\n          },\n          { Header: 'Instance Count', accessor: 'count' },\n        ]}\n      >\n        <DataTable.TableControlBar />\n        <DataTable.Table />\n        <DataTable.EmptyTable content=\"No summary available\" />\n        <DataTable.TableFooter />\n      </DataTable>\n    </div>\n  );\n};\n\n// Paragon version in all projects\nconst ProjectsUsage = () => (\n  <div className=\"pt-5 mb-5\">\n    <h3 className=\"mb-4\">Projects in Open edX consuming Paragon</h3>\n    <DataTable\n      isExpandable\n      isSortable\n      itemCount={dependentProjects.length}\n      data={dependentProjects}\n      renderRowSubComponent={({ row }) => <ProjectUsageExamples row={row} />}\n      columns={[\n        {\n          id: 'expander',\n          Header: DataTable.ExpandAll,\n          Cell: DataTable.ExpandRow,\n        },\n        {\n          Header: 'Project Name',\n          accessor: 'folderName',\n        },\n        { Header: 'Paragon Version', accessor: 'version' },\n        { Header: 'Instance Count', accessor: 'count' },\n      ]}\n    >\n      <DataTable.TableControlBar />\n      <DataTable.Table />\n      <DataTable.EmptyTable content=\"No projects\" />\n      <DataTable.TableFooter />\n    </DataTable>\n  </div>\n);\n\n// Usage info about a single component\nconst ComponentUsage = ({ name, componentUsageInProjects }) => (\n  <div className=\"mb-5\">\n    <h3 className=\"mb-4\">{name}</h3>\n    <DataTable\n      isExpandable\n      isSortable\n      itemCount={componentUsageInProjects.length} // eslint-disable-line\n      data={componentUsageInProjects}\n      renderRowSubComponent={({ row }) => <ComponentUsageExamples row={row} />}\n      columns={[\n        {\n          id: 'expander',\n          Header: DataTable.ExpandAll,\n          Cell: DataTable.ExpandRow,\n        },\n        {\n          Header: 'Project Name',\n          accessor: 'folderName',\n        },\n        { Header: 'Paragon Version', accessor: 'version' },\n        { Header: 'Instance Count', accessor: 'componentUsageCount' },\n      ]}\n    >\n      <DataTable.Table />\n      <DataTable.EmptyTable content=\"No usages\" />\n    </DataTable>\n  </div>\n);\n\n// Usage info for all components\nconst ComponentsUsage = () => (\n  <div className=\"pt-5 mb-5\">\n    {Object.keys(componentsUsage).sort().map(name => (\n      <ComponentUsage\n        key={name}\n        name={name}\n        componentUsageInProjects={componentsUsage[name]}\n      />\n    ))}\n  </div>\n);\n\nexport default function InsightsPage({ pageContext: { tab } }) {\n  const handleOnSelect = (value) => {\n    if (value !== tab) {\n      global.analytics.track('Usage Insights', { tab: value });\n      navigate(INSIGHTS_PAGES.find(item => item.tab === value).path);\n    }\n  };\n\n  return (\n    <Layout>\n      <Container size=\"md\" className=\"py-5\">\n        {/* eslint-disable-next-line react/jsx-pascal-case */}\n        <SEO title=\"Usage Insights\" />\n        <header className=\"mb-5\">\n          <h1>Usage Insights</h1>\n          <p>Last updated: {new Date(analysisLastUpdated).toLocaleDateString()}</p>\n        </header>\n        <Tabs\n          activeKey={tab}\n          id=\"uncontrolled-tab-example\"\n          onSelect={handleOnSelect}\n        >\n          <Tab eventKey={INSIGHTS_TABS.SUMMARY} title=\"Summary\">\n            <SummaryUsage />\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.PROJECTS} title=\"Projects\">\n            <ProjectsUsage />\n          </Tab>\n          <Tab eventKey={INSIGHTS_TABS.COMPONENTS} title=\"Components\">\n            <ComponentsUsage />\n          </Tab>\n        </Tabs>\n      </Container>\n    </Layout>\n  );\n}\n\nInsightsPage.propTypes = {\n  pageContext: PropTypes.shape({\n    tab: PropTypes.oneOf(Object.values(INSIGHTS_TABS)),\n  }).isRequired,\n};\n"],"names":["row","original","usages","map","name","projectName","projectUsages","repositoryUrl","className","key","filePath","line","Hyperlink","destination","target","componentUsages","Object","keys","length","entries","componentName","repository","url","parts","split","githubDomainIndex","findIndex","part","splice","join","replace","lastModified","analysisLastUpdated","dependentProjectsUsages","dependentProjectsAnalysis","dependentProjects","dependentUsage","getGithubProjectUrl","count","values","reduce","accumulator","usage","componentsUsage","project","forEach","concat","folderName","version","componentUsageCount","summaryComponentsUsage","SummaryUsage","summaryTableData","sort","a","b","nameA","toUpperCase","nameB","averageComponentsUsedPerProject","n","Math","round","DataTable","isExpandable","isSortable","itemCount","data","renderRowSubComponent","columns","id","Header","Cell","accessor","content","ProjectsUsage","ComponentUsage","componentUsageInProjects","ComponentsUsage","InsightsPage","pageContext","tab","Container","size","SEO","title","Date","toLocaleDateString","Tabs","activeKey","onSelect","value","global","analytics","track","navigate","INSIGHTS_PAGES","item","path","Tab","eventKey","INSIGHTS_TABS"],"sourceRoot":""}